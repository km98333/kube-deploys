apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-operator
data:
  watched_namespace: "*"
  cluster_labels: application:spilo
  cluster_name_label: version
  pod_role_label: spilo-role

  debug_logging: "true"
  workers: "3"
  docker_image: registry.opensource.zalan.do/acid/spilo-11:latest
  pod_service_account_name: "zalando-postgres-operator"
  secret_name_template: '{username}.{cluster}.credentials'
  super_username: postgres
  enable_teams_api: "false"
  enable_pod_antiaffinity: "true"
  pod_antiaffinity_topology_key: "kubernetes.io/hostname"
  # custom_service_annotations:
  #   "keyx:valuez,keya:valuea"
  # set_memory_request_to_limit: "true"
  # postgres_superuser_teams: "postgres_superusers"
  # enable_team_superuser: "false"
  # team_admin_role: "admin"
  # enable_admin_role_for_users: "true"
  # teams_api_url: http://fake-teams-api.default.svc.cluster.local
  # team_api_role_configuration: "log_statement:all"
  # infrastructure_roles_secret_name: postgresql-infrastructure-roles
  # oauth_token_secret_name: postgresql-operator
  # pam_role_name: zalandos
  # pam_configuration: |
  #  https://info.example.com/oauth2/tokeninfo?access_token= uid realm=/employees
  aws_region: eu-central-1
  db_hosted_zone: db.milky-way.cloud
  master_dns_name_format: '{cluster}.{team}.staging.{hostedzone}'
  replica_dns_name_format: '{cluster}-repl.{team}.staging.{hostedzone}'
  enable_master_load_balancer: "false"
  enable_replica_load_balancer: "false"

  pdb_name_format: "postgres-{cluster}-pdb"

  api_port: "8080"
  ring_log_lines: "100"
  cluster_history_entries: "1000"
  pod_terminate_grace_period: 5m
  pod_deletion_wait_timeout: 10m
  pod_label_wait_timeout: 10m
  pod_management_policy: "ordered_ready"
  ready_wait_interval: 3s
  ready_wait_timeout: 30s
  #  master_pod_move_timeout: 10m
  replication_username: standby
  resource_check_interval: 3s
  resource_check_timeout: 10m
  resync_period: 5m
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zalando-postgres-operator
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: zalando-postgres-operator
rules:
- apiGroups:
  - acid.zalan.do
  resources:
  - postgresqls
  - operatorconfigurations
  verbs:
  - "*"
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - watch # needed if zalando-postgres-operator account is used for pods as well
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - delete
  - get
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - delete
  - get
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - update # only for resizing AWS volumes
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - patch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - get
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - create
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - rolebindings
  verbs:
  - get
  - create
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - clusterroles
  verbs:
  - bind
  resourceNames:
  - zalando-postgres-operator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: zalando-postgres-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: zalando-postgres-operator
subjects:
- kind: ServiceAccount
# note: the cluster role binding needs to be defined
# for every namespace the operator service account lives in.
  name: zalando-postgres-operator
  namespace: owncloud
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgres-operator
  template:
    metadata:
      labels:
        name: postgres-operator
    spec:
      serviceAccountName: zalando-postgres-operator
      containers:
      - name: postgres-operator
        image: registry.opensource.zalan.do/acid/smoke-tested-postgres-operator:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 125m
            memory: 250Mi
          limits:
            cpu: 2000m
            memory: 500Mi
        env:
        # provided additional ENV vars can overwrite individual config map entries
        - name: CONFIG_MAP_NAME
          value: "postgres-operator"
        # In order to use the CRD OperatorConfiguration instead, uncomment these lines and comment out the two lines above
        # - name: POSTGRES_OPERATOR_CONFIGURATION_OBJECT
        #  value: postgresql-operator-default-configuration
